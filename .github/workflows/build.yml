name: Go Build
on:
  push:
    branches:
      - 'master'
      - 'releases/v*'
    tags:
      - 'v*'
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          # Version here has to match one returned via https://golang.org/dl/?mode=json&include=all
          go-version: &goversion '1.17'
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache go module
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build and Test
        run: go test -v -race -cover ./...

  Docker-Image:
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    needs: build
    name: Docker Build, Tag, Push

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Unshallow
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: git fetch --prune --unshallow

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login - Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login - GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: *goversion

      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v2.7.0
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release --rm-dist
